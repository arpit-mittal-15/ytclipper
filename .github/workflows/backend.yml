name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, staging]
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"

  pull_request:
    branches: [main, staging]
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
      deploy-type: ${{ steps.check-deploy.outputs.deploy-type }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Run checks in parallel
        run: |
          cd backend
          # Run tests, formatting, and linting in parallel
          go test ./... &
          go fmt ./... &
          go vet ./... &
          wait

      - name: Check deployment requirements
        id: check-deploy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-type=pr" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-type=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-type=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "deploy-type=none" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check-deploy.outputs.should-deploy == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.check-deploy.outputs.should-deploy == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.check-deploy.outputs.should-deploy == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          flavor: |
            latest=false

      - name: Build and push Docker image
        if: steps.check-deploy.outputs.should-deploy == 'true'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: needs.test-and-build.outputs.should-deploy == 'true'
    outputs:
      deployment-url: ${{ steps.deploy-result.outputs.deployment-url }}
      deployment-port: ${{ steps.deploy-result.outputs.deployment-port }}
      deployment-branch: ${{ steps.deploy-result.outputs.deployment-branch }}
    environment:
      name: ${{ needs.test-and-build.outputs.deploy-type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine deployment context
        id: context
        run: |
          case "${{ needs.test-and-build.outputs.deploy-type }}" in
            "production")
              echo "branch=prod" >> $GITHUB_OUTPUT
              echo "port=8080" >> $GITHUB_OUTPUT
              echo "domain=api.ytclipper.com" >> $GITHUB_OUTPUT
              echo "target-dir=/opt/ytclipper/production" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "branch=staging" >> $GITHUB_OUTPUT
              echo "port=8081" >> $GITHUB_OUTPUT
              echo "domain=api-staging.ytclipper.com" >> $GITHUB_OUTPUT
              echo "target-dir=/opt/ytclipper/deployments/staging" >> $GITHUB_OUTPUT
              ;;
            "pr")
              BRANCH="pr-${{ github.event.number }}"
              PORT_OFFSET=$((${{ github.event.number }} % 100))
              PORT=$((8100 + $PORT_OFFSET))
              echo "branch=$BRANCH" >> $GITHUB_OUTPUT
              echo "port=$PORT" >> $GITHUB_OUTPUT
              echo "domain=api-$BRANCH.ytclipper.com" >> $GITHUB_OUTPUT
              echo "target-dir=/opt/ytclipper/deployments/$BRANCH" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Create deployment artifacts
        run: |
          mkdir -p deploy-temp
          cp docker/compose.yml deploy-temp/

          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          cat > deploy-temp/.env << EOF
          BACKEND_IMAGE=ghcr.io/$REPO_LOWER/backend@${{ needs.test-and-build.outputs.image-digest }}
          BACKEND_PORT=${{ steps.context.outputs.port }}
          CONTAINER_SUFFIX=${{ steps.context.outputs.branch }}

          DATABASE_URL=${{ secrets.DATABASE_URL }}
          AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}
          AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET }}
          AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}
          AUTH0_CALLBACK_URL=${{ secrets.AUTH0_CALLBACK_URL }}
          EOF

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            TARGET_DIR="${{ steps.context.outputs.target-dir }}"
            CONTAINER_NAME="ytclipper-${{ steps.context.outputs.branch }}-backend"
            DOMAIN="${{ steps.context.outputs.domain }}"
            PORT="${{ steps.context.outputs.port }}"

            echo "🚀 Deploying to $TARGET_DIR"

            # Create directory
            mkdir -p "$TARGET_DIR"

            # Stop existing container
            if [ "$(docker ps -aq -f name=^${CONTAINER_NAME}$)" ]; then
              echo "Stopping existing container: $CONTAINER_NAME"
              docker rm -f "$CONTAINER_NAME"
            fi

      - name: Upload deployment files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy-temp/*"
          target: "${{ steps.context.outputs.target-dir }}"
          strip_components: 1

      - name: Start services and configure nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            TARGET_DIR="${{ steps.context.outputs.target-dir }}"
            DOMAIN="${{ steps.context.outputs.domain }}"
            PORT="${{ steps.context.outputs.port }}"

            # Login to registry and start container
            cd "$TARGET_DIR"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker compose -f compose.yml --env-file .env up -d --no-deps backend

            # Configure nginx
            sudo tee /etc/nginx/sites-available/$DOMAIN > /dev/null << EOF
            server {
              listen 80;
              server_name $DOMAIN;
              return 301 https://\$host\$request_uri;
            }
            server {
              listen 443 ssl;
              server_name $DOMAIN;
              ssl_certificate /etc/letsencrypt/live/ytclipper.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/ytclipper.com/privkey.pem;
              location / {
                proxy_pass http://localhost:$PORT;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            EOF

            sudo ln -sf "/etc/nginx/sites-available/$DOMAIN" "/etc/nginx/sites-enabled/$DOMAIN"
            sudo nginx -t && sudo systemctl reload nginx

      - name: Health check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            PORT="${{ steps.context.outputs.port }}"

            # Wait for service to be ready
            for i in {1..30}; do
              if curl -f -s http://localhost:$PORT/health > /dev/null; then
                echo "✅ Service is healthy on port $PORT"
                exit 0
              fi
              echo "⏳ Waiting for service to be ready... ($i/30)"
              sleep 2
            done

            echo "❌ Health check failed after 60 seconds"
            exit 1

      - name: Set deployment outputs
        id: deploy-result
        run: |
          echo "deployment-url=https://${{ steps.context.outputs.domain }}" >> $GITHUB_OUTPUT
          echo "deployment-port=${{ steps.context.outputs.port }}" >> $GITHUB_OUTPUT
          echo "deployment-branch=${{ steps.context.outputs.branch }}" >> $GITHUB_OUTPUT

  comment-pr:
    name: 💬 Comment on PR
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Comment on successful deployment
        if: needs.deploy.result == 'success'
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "backend-deployment"
          message: |
            ## 🚀 Backend Deployment Successful!

            Your backend changes have been deployed and are ready for testing:

            - **🔗 URL**: ${{ needs.deploy.outputs.deployment-url }}
            - **📦 Branch**: ${{ needs.deploy.outputs.deployment-branch }}
            - **🔢 Port**: ${{ needs.deploy.outputs.deployment-port }}
            - **⏰ Deployed**: ${{ github.event.head_commit.timestamp }}

            _This deployment will be automatically cleaned up when the PR is closed._

      - name: Comment on failed deployment
        if: needs.deploy.result == 'failure'
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "backend-deployment"
          message: |
            ## ❌ Backend Deployment Failed

            The deployment failed. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            Common issues:
            - Build errors
            - VPS connectivity issues
            - Port conflicts
            - Database connection issues

            _Push new changes to retry the deployment._

  cleanup-pr:
    name: 🧹 Cleanup PR Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Cleanup deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            BRANCH="pr-${{ github.event.number }}"
            CONTAINER_NAME="ytclipper-$BRANCH-backend"
            DOMAIN="api-$BRANCH.ytclipper.com"

            echo "🧹 Cleaning up deployment for $BRANCH"

            # Stop and remove container
            if [ "$(docker ps -aq -f name=^${CONTAINER_NAME}$)" ]; then
              echo "Removing container: $CONTAINER_NAME"
              docker rm -f "$CONTAINER_NAME"
            fi

            # Remove nginx config
            sudo rm -f "/etc/nginx/sites-enabled/$DOMAIN"
            sudo rm -f "/etc/nginx/sites-available/$DOMAIN"
            sudo nginx -t && sudo systemctl reload nginx

            # Remove deployment directory
            rm -rf "/opt/ytclipper/deployments/$BRANCH"

            echo "✅ Cleanup completed for $BRANCH"

      - name: Comment on cleanup
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "backend-deployment"
          message: |
            ## 🧹 Deployment Cleaned Up

            The staging deployment for this PR has been automatically removed.

            - **Container**: Stopped and removed
            - **Nginx config**: Removed
            - **Files**: Cleaned up

            _Deployment resources have been freed up._
