name: üßπ Unified Cleanup After PR Merge

on:
  pull_request:
    types: [closed]

jobs:
  cleanup:
    name: Cleanup Both Services on PR Merge
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Extract PR Information
        id: extract
        run: |
          PR_NUMBER="${{ github.event.number }}"
          BRANCH="pr-$PR_NUMBER"
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Cleaning up resources for PR #$PR_NUMBER (branch: $BRANCH)"

      - name: Cleanup VPS Resources
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            PR_NUMBER="${{ steps.extract.outputs.pr_number }}"
            BRANCH="${{ steps.extract.outputs.branch }}"

            echo "üîç Starting cleanup for PR #$PR_NUMBER (branch: $BRANCH)"

            # Define resource names based on current deployment structure
            BACKEND_CONTAINER="ytclipper-$BRANCH-backend"
            FRONTEND_CONTAINER="ytclipper-$BRANCH-app"
            DEPLOYMENT_DIR="/opt/ytclipper/deployments/$BRANCH"
            BACKEND_DOMAIN="api-$BRANCH.ytclipper.com"
            FRONTEND_DOMAIN="app-$BRANCH.ytclipper.com"

            echo "üì¶ Target containers: $BACKEND_CONTAINER, $FRONTEND_CONTAINER"
            echo "üìÅ Target directory: $DEPLOYMENT_DIR"
            echo "üåê Target domains: $BACKEND_DOMAIN, $FRONTEND_DOMAIN"

            # List current containers for debugging
            echo "üì¶ Current containers before cleanup:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # Stop and remove containers
            echo "üõë Stopping and removing containers..."

            # Backend container
            BACKEND_CONTAINERS=$(docker ps -aq -f name="$BACKEND_CONTAINER" || true)
            if [ -n "$BACKEND_CONTAINERS" ]; then
              echo "‚úÖ Found backend container: $BACKEND_CONTAINER"
              docker rm -f "$BACKEND_CONTAINER"
              echo "üóëÔ∏è  Removed backend container: $BACKEND_CONTAINER"
            else
              echo "‚ÑπÔ∏è  No backend container found: $BACKEND_CONTAINER"
            fi

            # Frontend container
            FRONTEND_CONTAINERS=$(docker ps -aq -f name="$FRONTEND_CONTAINER" || true)
            if [ -n "$FRONTEND_CONTAINERS" ]; then
              echo "‚úÖ Found frontend container: $FRONTEND_CONTAINER"
              docker rm -f "$FRONTEND_CONTAINER"
              echo "üóëÔ∏è  Removed frontend container: $FRONTEND_CONTAINER"
            else
              echo "‚ÑπÔ∏è  No frontend container found: $FRONTEND_CONTAINER"
            fi

            # Try to find any containers with partial name match as fallback
            PARTIAL_CONTAINERS=$(docker ps -aq --filter "name=ytclipper-$BRANCH" || true)
            if [ -n "$PARTIAL_CONTAINERS" ]; then
              echo "üîç Found additional containers with partial match:"
              for container in $PARTIAL_CONTAINERS; do
                CONTAINER_NAME_FULL=$(docker ps -a --format "{{.Names}}" --filter "id=$container")
                echo "üõë Stopping and removing: $CONTAINER_NAME_FULL"
                docker rm -f "$container"
              done
            fi

            # Remove Nginx configurations
            echo "üóëÔ∏è  Removing Nginx configurations..."

            # Backend domain
            if [ -f "/etc/nginx/sites-enabled/$BACKEND_DOMAIN" ]; then
              sudo rm -f "/etc/nginx/sites-enabled/$BACKEND_DOMAIN"
              echo "‚úÖ Removed nginx sites-enabled: $BACKEND_DOMAIN"
            else
              echo "‚ÑπÔ∏è  No nginx sites-enabled found: $BACKEND_DOMAIN"
            fi

            if [ -f "/etc/nginx/sites-available/$BACKEND_DOMAIN" ]; then
              sudo rm -f "/etc/nginx/sites-available/$BACKEND_DOMAIN"
              echo "‚úÖ Removed nginx sites-available: $BACKEND_DOMAIN"
            else
              echo "‚ÑπÔ∏è  No nginx sites-available found: $BACKEND_DOMAIN"
            fi

            # Frontend domain
            if [ -f "/etc/nginx/sites-enabled/$FRONTEND_DOMAIN" ]; then
              sudo rm -f "/etc/nginx/sites-enabled/$FRONTEND_DOMAIN"
              echo "‚úÖ Removed nginx sites-enabled: $FRONTEND_DOMAIN"
            else
              echo "‚ÑπÔ∏è  No nginx sites-enabled found: $FRONTEND_DOMAIN"
            fi

            if [ -f "/etc/nginx/sites-available/$FRONTEND_DOMAIN" ]; then
              sudo rm -f "/etc/nginx/sites-available/$FRONTEND_DOMAIN"
              echo "‚úÖ Removed nginx sites-available: $FRONTEND_DOMAIN"
            else
              echo "‚ÑπÔ∏è  No nginx sites-available found: $FRONTEND_DOMAIN"
            fi

            # Test and reload Nginx configuration
            echo "üîÑ Testing and reloading Nginx..."
            if sudo nginx -t 2>/dev/null; then
              sudo systemctl reload nginx
              echo "‚úÖ Nginx configuration reloaded successfully"
            else
              echo "‚ö†Ô∏è  Nginx configuration test failed, but continuing cleanup"
            fi

            # Remove deployment directories
            echo "üóëÔ∏è  Removing deployment directories..."

            # Remove backend directory
            if [ -d "$DEPLOYMENT_DIR/backend" ]; then
              rm -rf "$DEPLOYMENT_DIR/backend"
              echo "‚úÖ Removed backend directory: $DEPLOYMENT_DIR/backend"
            else
              echo "‚ÑπÔ∏è  No backend directory found: $DEPLOYMENT_DIR/backend"
            fi

            # Remove frontend directory
            if [ -d "$DEPLOYMENT_DIR/frontend" ]; then
              rm -rf "$DEPLOYMENT_DIR/frontend"
              echo "‚úÖ Removed frontend directory: $DEPLOYMENT_DIR/frontend"
            else
              echo "‚ÑπÔ∏è  No frontend directory found: $DEPLOYMENT_DIR/frontend"
            fi

            # Remove parent directory if empty
            if [ -d "$DEPLOYMENT_DIR" ]; then
              if [ -z "$(ls -A "$DEPLOYMENT_DIR" 2>/dev/null)" ]; then
                rm -rf "$DEPLOYMENT_DIR"
                echo "‚úÖ Removed empty deployment directory: $DEPLOYMENT_DIR"
              else
                echo "‚ÑπÔ∏è  Deployment directory not empty, keeping: $DEPLOYMENT_DIR"
                echo "üìÅ Contents: $(ls -la "$DEPLOYMENT_DIR")"
              fi
            else
              echo "‚ÑπÔ∏è  No deployment directory found: $DEPLOYMENT_DIR"
            fi

            # Clean up unused Docker images
            echo "üßπ Cleaning up unused Docker images..."
            docker image prune -af --filter "label=org.opencontainers.image.ref.name=*$BRANCH*" || true

            echo "‚úÖ VPS cleanup completed for PR #$PR_NUMBER"
            echo "üìä Summary:"
            echo "  - Containers: $BACKEND_CONTAINER, $FRONTEND_CONTAINER"
            echo "  - Directories: $DEPLOYMENT_DIR"
            echo "  - Domains: $BACKEND_DOMAIN, $FRONTEND_DOMAIN"

      - name: Cleanup GHCR Images for Backend
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.number;
            const prTag = `pr-${prNumber}`;

            console.log(`üßπ Cleaning up GHCR backend images for PR #${prNumber}`);
            console.log(`üîç Looking for images tagged with: ${prTag}`);

            try {
              // Get all package versions for backend
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByAuthenticatedUser({
                package_type: 'container',
                package_name: `${context.repo.owner}/${context.repo.repo}/backend`,
                per_page: 100
              });
              
              console.log(`üì¶ Found ${versions.length} total backend package versions`);
              
              let deletedCount = 0;
              
              for (const version of versions) {
                const tags = version.metadata?.container?.tags || [];
                console.log(`üîç Version ${version.id}: tags = [${tags.join(', ')}]`);
                
                // Check if this version has the PR tag
                if (tags.includes(prTag)) {
                  console.log(`üóëÔ∏è  Deleting version ${version.id} (tagged with ${prTag})`);
                  
                  try {
                    await github.rest.packages.deletePackageVersionForAuthenticatedUser({
                      package_type: 'container',
                      package_name: `${context.repo.owner}/${context.repo.repo}/backend`,
                      package_version_id: version.id
                    });
                    
                    console.log(`‚úÖ Successfully deleted version ${version.id}`);
                    deletedCount++;
                  } catch (error) {
                    console.log(`‚ùå Failed to delete version ${version.id}: ${error.message}`);
                  }
                } else {
                  console.log(`‚è© Keeping version ${version.id} (no PR tag)`);
                }
              }
              
              console.log(`üìä Backend cleanup summary: deleted ${deletedCount} images for PR #${prNumber}`);
              
            } catch (error) {
              console.log(`‚ö†Ô∏è  Error during backend GHCR cleanup: ${error.message}`);
              // Don't fail the workflow if GHCR cleanup fails
            }

      - name: Cleanup GHCR Images for Frontend
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.number;
            const prTag = `pr-${prNumber}`;

            console.log(`üßπ Cleaning up GHCR frontend images for PR #${prNumber}`);
            console.log(`üîç Looking for images tagged with: ${prTag}`);

            try {
              // Get all package versions for frontend
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByAuthenticatedUser({
                package_type: 'container',
                package_name: `${context.repo.owner}/${context.repo.repo}/frontend`,
                per_page: 100
              });
              
              console.log(`üì¶ Found ${versions.length} total frontend package versions`);
              
              let deletedCount = 0;
              
              for (const version of versions) {
                const tags = version.metadata?.container?.tags || [];
                console.log(`üîç Version ${version.id}: tags = [${tags.join(', ')}]`);
                
                // Check if this version has the PR tag
                if (tags.includes(prTag)) {
                  console.log(`üóëÔ∏è  Deleting version ${version.id} (tagged with ${prTag})`);
                  
                  try {
                    await github.rest.packages.deletePackageVersionForAuthenticatedUser({
                      package_type: 'container',
                      package_name: `${context.repo.owner}/${context.repo.repo}/frontend`,
                      package_version_id: version.id
                    });
                    
                    console.log(`‚úÖ Successfully deleted version ${version.id}`);
                    deletedCount++;
                  } catch (error) {
                    console.log(`‚ùå Failed to delete version ${version.id}: ${error.message}`);
                  }
                } else {
                  console.log(`‚è© Keeping version ${version.id} (no PR tag)`);
                }
              }
              
              console.log(`üìä Frontend cleanup summary: deleted ${deletedCount} images for PR #${prNumber}`);
              
            } catch (error) {
              console.log(`‚ö†Ô∏è  Error during frontend GHCR cleanup: ${error.message}`);
              // Don't fail the workflow if GHCR cleanup fails
            }

      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "cleanup-summary"
          message: |
            ## üßπ Cleanup Completed

            The deployment resources for this PR have been successfully cleaned up:

            ### üóëÔ∏è Removed Resources
            - **Containers**: `ytclipper-pr-${{ steps.extract.outputs.pr_number }}-backend`, `ytclipper-pr-${{ steps.extract.outputs.pr_number }}-app`
            - **Directories**: `/opt/ytclipper/deployments/pr-${{ steps.extract.outputs.pr_number }}/`
            - **Domains**: `api-pr-${{ steps.extract.outputs.pr_number }}.ytclipper.com`, `app-pr-${{ steps.extract.outputs.pr_number }}.ytclipper.com`
            - **GHCR Images**: Container images tagged with `pr-${{ steps.extract.outputs.pr_number }}`

            ### üìä Cleanup Summary
            - ‚úÖ VPS resources cleaned up
            - ‚úÖ Nginx configurations removed
            - ‚úÖ Docker containers stopped and removed
            - ‚úÖ Deployment directories cleaned up
            - ‚úÖ GHCR images deleted
            - ‚úÖ Nginx reloaded

            The VPS is now clean and ready for future deployments! üéâ
