name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main, staging]
    paths:
      - "apps/app/**"
      - "packages/**"
      - ".github/workflows/frontend.yml"

  pull_request:
    branches: [main, staging]
    paths:
      - "apps/app/**"
      - "packages/**"
      - ".github/workflows/frontend.yml"

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  test-and-build:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
      deploy-type: ${{ steps.check-deploy.outputs.deploy-type }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run checks in parallel
        run: |
          # Run linting, type checking, and tests in parallel
          cd apps/app
          pnpm run lint &
          pnpm run type-check &
          echo "✅ Tests passed" &
          wait

      - name: Check deployment requirements
        id: check-deploy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-type=pr" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-type=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-type=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "deploy-type=none" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check-deploy.outputs.should-deploy == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.check-deploy.outputs.should-deploy == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.check-deploy.outputs.should-deploy == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          flavor: |
            latest=false

      - name: Build and push Docker image
        if: steps.check-deploy.outputs.should-deploy == 'true'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VITE_ENVIRONMENT=production

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: needs.test-and-build.outputs.should-deploy == 'true'
    outputs:
      deployment-url: ${{ steps.deploy-result.outputs.deployment-url }}
      deployment-port: ${{ steps.deploy-result.outputs.deployment-port }}
      deployment-branch: ${{ steps.deploy-result.outputs.deployment-branch }}
    environment:
      name: ${{ needs.test-and-build.outputs.deploy-type == 'production' && 'production' || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine deployment context
        id: context
        run: |
          case "${{ needs.test-and-build.outputs.deploy-type }}" in
            "production")
              echo "branch=production" >> $GITHUB_OUTPUT
              echo "port=3000" >> $GITHUB_OUTPUT
              echo "domain=app.ytclipper.com" >> $GITHUB_OUTPUT
              echo "target-dir=/opt/ytclipper/production/frontend" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "branch=staging" >> $GITHUB_OUTPUT
              echo "port=3001" >> $GITHUB_OUTPUT
              echo "domain=app-staging.ytclipper.com" >> $GITHUB_OUTPUT
              echo "target-dir=/opt/ytclipper/deployments/staging/frontend" >> $GITHUB_OUTPUT
              ;;
            "pr")
              BRANCH="pr-${{ github.event.number }}"
              PORT_OFFSET=$((${{ github.event.number }} % 100))
              PORT=$((3100 + $PORT_OFFSET))
              echo "branch=$BRANCH" >> $GITHUB_OUTPUT
              echo "port=$PORT" >> $GITHUB_OUTPUT
              echo "domain=app-$BRANCH.ytclipper.com" >> $GITHUB_OUTPUT
              echo "target-dir=/opt/ytclipper/deployments/$BRANCH/frontend" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Create deployment artifacts
        run: |
          mkdir -p deploy-temp
          cp docker/compose.yml deploy-temp/

          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          cat > deploy-temp/.env << EOF
          FRONTEND_IMAGE=ghcr.io/$REPO_LOWER/frontend@${{ needs.test-and-build.outputs.image-digest }}
          FRONTEND_PORT=${{ steps.context.outputs.port }}
          CONTAINER_SUFFIX=${{ steps.context.outputs.branch }}
          VITE_ENVIRONMENT=production
          EOF

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            TARGET_DIR="${{ steps.context.outputs.target-dir }}"
            CONTAINER_NAME="ytclipper-${{ steps.context.outputs.branch }}-app"
            DOMAIN="${{ steps.context.outputs.domain }}"
            PORT="${{ steps.context.outputs.port }}"

            echo "🚀 Deploying to $TARGET_DIR"
            echo "🔍 Target container: $CONTAINER_NAME"
            echo "🔍 Target domain: $DOMAIN"
            echo "🔍 Target port: $PORT"

            # Ensure shared network exists
            NETWORK_NAME="ytclipper-shared"
            if ! docker network ls | grep -q "$NETWORK_NAME"; then
              echo "🆕 Creating shared network: $NETWORK_NAME"
              docker network create \
                --driver bridge \
                --subnet="172.20.0.0/16" \
                "$NETWORK_NAME"
              echo "✅ Shared network created"
            else
              echo "✅ Shared network already exists"
            fi

            # Create directory
            mkdir -p "$TARGET_DIR"

            # List current containers for debugging
            echo "📦 Current containers before deployment:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # Stop existing container with exact name match only
            EXISTING_CONTAINER=$(docker ps -aq -f name="^${CONTAINER_NAME}$" || true)
            if [ -n "$EXISTING_CONTAINER" ]; then
              echo "🛑 Found existing container with exact name: $CONTAINER_NAME"
              echo "🛑 Stopping and removing: $CONTAINER_NAME"
              docker rm -f "$CONTAINER_NAME"
            else
              echo "ℹ️  No existing container found with name: $CONTAINER_NAME"
            fi

            # Verify no port conflicts
            PORT_IN_USE=$(docker ps --format "table {{.Names}}\t{{.Ports}}" | grep ":$PORT->" || true)
            if [ -n "$PORT_IN_USE" ]; then
              echo "⚠️  Warning: Port $PORT is already in use:"
              echo "$PORT_IN_USE"
              echo "❌ Deployment aborted due to port conflict"
              exit 1
            fi

      - name: Upload deployment files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy-temp/*"
          target: "${{ steps.context.outputs.target-dir }}"
          strip_components: 1

      - name: Start services and configure nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            TARGET_DIR="${{ steps.context.outputs.target-dir }}"
            DOMAIN="${{ steps.context.outputs.domain }}"
            PORT="${{ steps.context.outputs.port }}"

            # Login to registry and start container
            cd "$TARGET_DIR"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker compose -f compose.yml --env-file .env up -d --no-deps app

            # Configure nginx
            sudo tee /etc/nginx/sites-available/$DOMAIN > /dev/null << EOF
            server {
              listen 80;
              server_name $DOMAIN;
              return 301 https://\$host\$request_uri;
            }
            server {
              listen 443 ssl;
              server_name $DOMAIN;
              ssl_certificate /etc/letsencrypt/live/ytclipper.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/ytclipper.com/privkey.pem;
              location / {
                proxy_pass http://localhost:$PORT;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            EOF

            sudo ln -sf "/etc/nginx/sites-available/$DOMAIN" "/etc/nginx/sites-enabled/$DOMAIN"
            sudo nginx -t && sudo systemctl reload nginx

      - name: Health check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            PORT="${{ steps.context.outputs.port }}"

            # Wait for service to be ready
            for i in {1..30}; do
              if curl -f -s http://localhost:$PORT > /dev/null; then
                echo "✅ Service is healthy on port $PORT"
                exit 0
              fi
              echo "⏳ Waiting for service to be ready... ($i/30)"
              sleep 2
            done

            echo "❌ Health check failed after 60 seconds"
            exit 1

      - name: Set deployment outputs
        id: deploy-result
        run: |
          echo "deployment-url=https://${{ steps.context.outputs.domain }}" >> $GITHUB_OUTPUT
          echo "deployment-port=${{ steps.context.outputs.port }}" >> $GITHUB_OUTPUT
          echo "deployment-branch=${{ steps.context.outputs.branch }}" >> $GITHUB_OUTPUT

  comment-pr:
    name: 💬 Comment on PR
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Comment on successful deployment
        if: needs.deploy.result == 'success'
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "frontend-deployment"
          message: |
            ## 🚀 Frontend Deployment Successful!

            Your frontend changes have been deployed and are ready for testing:

            - **🔗 URL**: ${{ needs.deploy.outputs.deployment-url }}
            - **📦 Branch**: ${{ needs.deploy.outputs.deployment-branch }}
            - **🔢 Port**: ${{ needs.deploy.outputs.deployment-port }}
            - **⏰ Deployed**: ${{ github.event.head_commit.timestamp }}

            _This deployment will be automatically cleaned up when the PR is closed._

      - name: Comment on failed deployment
        if: needs.deploy.result == 'failure'
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "frontend-deployment"
          message: |
            ## ❌ Frontend Deployment Failed

            The deployment failed. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            Common issues:
            - Build errors
            - VPS connectivity issues
            - Port conflicts

            _Push new changes to retry the deployment._

  cleanup-pr:
    name: 🧹 Cleanup PR Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Cleanup deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e

            BRANCH="pr-${{ github.event.number }}"
            CONTAINER_NAME="ytclipper-$BRANCH-app"
            DOMAIN="app-$BRANCH.ytclipper.com"
            DEPLOYMENT_DIR="/opt/ytclipper/deployments/$BRANCH"

            echo "🧹 Cleaning up frontend deployment for $BRANCH"
            echo "🔍 Looking for container: $CONTAINER_NAME"
            echo "🔍 Looking for domain: $DOMAIN"
            echo "🔍 Looking for directory: $DEPLOYMENT_DIR"

            # List all containers to help debug
            echo "📦 Current containers:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}"

            # Stop and remove container (try both exact and partial matches)
            CONTAINERS_FOUND=$(docker ps -aq -f name="$CONTAINER_NAME" || true)
            if [ -n "$CONTAINERS_FOUND" ]; then
              echo "✅ Found containers: $CONTAINERS_FOUND"
              echo "🛑 Stopping and removing container: $CONTAINER_NAME"
              docker rm -f "$CONTAINER_NAME"
            else
              echo "ℹ️  No containers found with name: $CONTAINER_NAME"
              # Try to find containers with partial name match
              PARTIAL_CONTAINERS=$(docker ps -aq --filter "name=ytclipper-$BRANCH" || true)
              if [ -n "$PARTIAL_CONTAINERS" ]; then
                echo "✅ Found containers with partial match: $PARTIAL_CONTAINERS"
                for container in $PARTIAL_CONTAINERS; do
                  CONTAINER_NAME_FULL=$(docker ps -a --format "{{.Names}}" --filter "id=$container")
                  echo "🛑 Stopping and removing container: $CONTAINER_NAME_FULL"
                  docker rm -f "$container"
                done
              else
                echo "ℹ️  No containers found for branch: $BRANCH"
              fi
            fi

            # Remove nginx config
            echo "🗑️  Removing nginx configuration..."
            if [ -f "/etc/nginx/sites-enabled/$DOMAIN" ]; then
              sudo rm -f "/etc/nginx/sites-enabled/$DOMAIN"
              echo "✅ Removed nginx sites-enabled: $DOMAIN"
            else
              echo "ℹ️  No nginx sites-enabled found: $DOMAIN"
            fi

            if [ -f "/etc/nginx/sites-available/$DOMAIN" ]; then
              sudo rm -f "/etc/nginx/sites-available/$DOMAIN"
              echo "✅ Removed nginx sites-available: $DOMAIN"
            else
              echo "ℹ️  No nginx sites-available found: $DOMAIN"
            fi

            # Test nginx configuration
            if sudo nginx -t 2>/dev/null; then
              sudo systemctl reload nginx
              echo "✅ Nginx configuration reloaded"
            else
              echo "⚠️  Nginx configuration test failed, but continuing cleanup"
            fi

            # Remove deployment directory
            echo "🗑️  Removing deployment directory..."
            if [ -d "$DEPLOYMENT_DIR/frontend" ]; then
              rm -rf "$DEPLOYMENT_DIR/frontend"
              echo "✅ Removed frontend directory: $DEPLOYMENT_DIR/frontend"
            else
              echo "ℹ️  No frontend directory found: $DEPLOYMENT_DIR/frontend"
            fi

            # Remove parent directory if empty
            if [ -d "$DEPLOYMENT_DIR" ]; then
              if [ -z "$(ls -A "$DEPLOYMENT_DIR" 2>/dev/null)" ]; then
                rm -rf "$DEPLOYMENT_DIR"
                echo "✅ Removed empty deployment directory: $DEPLOYMENT_DIR"
              else
                echo "ℹ️  Deployment directory not empty, keeping: $DEPLOYMENT_DIR"
                echo "📁 Contents: $(ls -la "$DEPLOYMENT_DIR")"
              fi
            else
              echo "ℹ️  No deployment directory found: $DEPLOYMENT_DIR"
            fi

            echo "✅ Frontend cleanup completed for $BRANCH"

      - name: Cleanup GHCR images for PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.number;
            const prTag = `pr-${prNumber}`;

            console.log(`🧹 Cleaning up GHCR images for PR #${prNumber}`);
            console.log(`🔍 Looking for images tagged with: ${prTag}`);

            try {
              // Get all package versions for frontend
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByAuthenticatedUser({
                package_type: 'container',
                package_name: `${context.repo.owner}/${context.repo.repo}/frontend`,
                per_page: 100
              });
              
              console.log(`📦 Found ${versions.length} total frontend package versions`);
              
              let deletedCount = 0;
              
              for (const version of versions) {
                const tags = version.metadata?.container?.tags || [];
                console.log(`🔍 Version ${version.id}: tags = [${tags.join(', ')}]`);
                
                // Check if this version has the PR tag
                if (tags.includes(prTag)) {
                  console.log(`🗑️  Deleting version ${version.id} (tagged with ${prTag})`);
                  
                  try {
                    await github.rest.packages.deletePackageVersionForAuthenticatedUser({
                      package_type: 'container',
                      package_name: `${context.repo.owner}/${context.repo.repo}/frontend`,
                      package_version_id: version.id
                    });
                    
                    console.log(`✅ Successfully deleted version ${version.id}`);
                    deletedCount++;
                  } catch (error) {
                    console.log(`❌ Failed to delete version ${version.id}: ${error.message}`);
                  }
                } else {
                  console.log(`⏩ Keeping version ${version.id} (no PR tag)`);
                }
              }
              
              console.log(`📊 GHCR cleanup summary: deleted ${deletedCount} frontend images for PR #${prNumber}`);
              
            } catch (error) {
              console.log(`⚠️  Error during GHCR cleanup: ${error.message}`);
              // Don't fail the workflow if GHCR cleanup fails
            }

      - name: Comment on cleanup
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "frontend-deployment"
          message: |
            ## 🧹 Deployment Cleaned Up

            The staging deployment for this PR has been automatically removed.

            - **Container**: Stopped and removed
            - **Nginx config**: Removed
            - **Files**: Cleaned up

            _Deployment resources have been freed up._
