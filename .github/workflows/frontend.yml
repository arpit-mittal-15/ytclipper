name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - "**"
    paths:
      - "apps/app/**"
      - ".github/workflows/frontend.yml"

  pull_request_target:
    branches:
      - main
      - staging
    paths:
      - "apps/app/**"
      - ".github/workflows/frontend.yml"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  preflight:
    name: 🚦 Preflight
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "EVENT    = ${{ github.event_name }}"
          echo "REF      = ${{ github.ref }}"
          echo "PR HEAD  = ${{ github.event.pull_request.head.ref }}"
          echo "-------------------------"

  pr-check:
    name: 🧪 PR Check (Lint & Test)
    needs: preflight
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request_target') ||
      (github.event_name == 'push' && (
        github.ref != 'refs/heads/main' &&
        github.ref != 'refs/heads/staging'
      ))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Verify pnpm version
        run: |
          pnpm --version

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: List workspace packages
        run: |
          pnpm ls --depth=0
          echo "Checking workspace structure:"
          ls -la packages/

      - name: Run linting
        run: |
          cd apps/app && pnpm run lint

      - name: Run type checking
        run: |
          cd apps/app && pnpm run type-check

      - name: Run tests
        run: |
          echo "Pretend we're running tests here..."

  build-push:
    name: 🏗️ Build & Push Docker
    runs-on: ubuntu-latest
    needs: [pr-check]

    if: |
      (github.event_name == 'pull_request_target') ||
      (github.event_name == 'push')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=${{ github.ref_name}}
          flavor: |
            latest=false
            prefix=
            suffix=

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VITE_ENVIRONMENT=production

      - name: Generate build summary
        run: |
          echo "## 🏗️ Frontend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: 🚀 Deploy to VPS (Production)
    runs-on: ubuntu-latest
    needs: [build-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract context
        id: context
        run: |
          echo "safe_branch=main" >> $GITHUB_OUTPUT

      - name: Use digest from build-push
        id: digest
        run: |
          echo "digest=${{ needs.build-push.outputs.image-digest }}" >> $GITHUB_OUTPUT

      - name: Create deployment artifacts
        run: |
          mkdir -p deploy-temp
          cp docker/compose.yml deploy-temp/
          touch deploy-temp/.env

          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "FRONTEND_IMAGE=ghcr.io/$REPO_LOWER/frontend@${{ steps.digest.outputs.digest }}" >> deploy-temp/.env
          echo "FRONTEND_PORT=3000" >> deploy-temp/.env
          echo "CONTAINER_SUFFIX=${{ steps.context.outputs.safe_branch }}" >> deploy-temp/.env

          echo "VITE_ENVIRONMENT=production" >> deploy-temp/.env

      - name: Upload files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy-temp/*"
          target: "/opt/ytclipper-frontend"
          strip_components: 1

      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/ytclipper-frontend
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker compose -f compose.yml --env-file .env up -d --no-deps app

      - name: Configure Nginx for production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            DOMAIN="app.ytclipper.com"
            PORT="3000"
            CONFIG_FILE="/etc/nginx/sites-available/$DOMAIN"
            sudo bash -c "cat > $CONFIG_FILE" <<EOF
            server {
              listen 80;
              server_name $DOMAIN;

              return 301 https://\$host\$request_uri;
            }

            server {
              listen 443 ssl;
              server_name $DOMAIN;

              ssl_certificate /etc/letsencrypt/live/ytclipper.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/ytclipper.com/privkey.pem;

              location / {
                proxy_pass http://localhost:$PORT;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            EOF

            sudo ln -sf $CONFIG_FILE /etc/nginx/sites-enabled/$DOMAIN
            sudo nginx -t
            sudo systemctl reload nginx

      - name: Healthcheck
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            if curl -f http://localhost:3000; then
              echo "✅ Frontend is healthy"
            else
              echo "❌ Frontend health check failed"
              exit 1
            fi

      - name: 🎉 Deployment Summary
        id: deployment_summary
        run: |
          echo "deployment_url=https://app.ytclipper.com" >> $GITHUB_OUTPUT
          echo "deployment_port=3000" >> $GITHUB_OUTPUT

  deploy-staging:
    name: 🚀 Deploy to VPS (Staging/Other Branches)
    runs-on: ubuntu-latest
    needs: [build-push]
    if: github.ref != 'refs/heads/main'
    environment:
      name: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract context
        id: context
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          SAFE_BRANCH=$(echo "$BRANCH" | tr '/' '-')
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

          if [ "$BRANCH" = "staging" ]; then
            echo "port=3001" >> $GITHUB_OUTPUT
            echo "domain=app-staging.ytclipper.com" >> $GITHUB_OUTPUT
            echo "compose_dir=/opt/ytclipper-app-staging" >> $GITHUB_OUTPUT
          else
            RANDOM_PORT=$((3001 + RANDOM % 1000))
            echo "port=$RANDOM_PORT" >> $GITHUB_OUTPUT
            echo "domain=$SAFE_BRANCH.ytclipper.com" >> $GITHUB_OUTPUT
            echo "compose_dir=/opt/ytclipper-app-staging/$SAFE_BRANCH" >> $GITHUB_OUTPUT
          fi

      - name: Use digest from build-push
        id: digest
        run: |
          echo "digest=${{ needs.build-push.outputs.image-digest }}" >> $GITHUB_OUTPUT

      - name: Create deployment artifacts
        run: |
          mkdir -p deploy-temp
          cp docker/compose.yml deploy-temp/
          touch deploy-temp/.env

          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "FRONTEND_IMAGE=ghcr.io/$REPO_LOWER/frontend@${{ steps.digest.outputs.digest }}" >> deploy-temp/.env
          echo "FRONTEND_PORT=${{ steps.context.outputs.port }}" >> deploy-temp/.env
          echo "CONTAINER_SUFFIX=${{ steps.context.outputs.safe_branch }}" >> deploy-temp/.env

      - name: Create target dir on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p ${{ steps.context.outputs.compose_dir }}

      - name: Upload to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy-temp/*"
          target: "${{ steps.context.outputs.compose_dir }}"
          strip_components: 1

      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ${{ steps.context.outputs.compose_dir }}
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            CONTAINER_SUFFIX=${{ steps.context.outputs.safe_branch }}
            APP_CONTAINER_NAME="ytclipper-${CONTAINER_SUFFIX}-app"

            echo "Checking for the existing container: $APP_CONTAINER_NAME"

            if [ "$(docker ps -aq -f name=^/${APP_CONTAINER_NAME}$)" ]; then
              echo "Stopping existing container: $APP_CONTAINER_NAME"
              docker rm -f $APP_CONTAINER_NAME
            fi

            docker compose -p $APP_CONTAINER_NAME -f compose.yml --env-file .env up -d --no-deps app

      - name: Configure Nginx for subdomain
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            DOMAIN="app-${{ steps.context.outputs.safe_branch }}.ytclipper.com"
            PORT="${{ steps.context.outputs.port }}"
            CONFIG_FILE="/etc/nginx/sites-available/$DOMAIN"

            sudo bash -c "cat > $CONFIG_FILE" <<EOF
            server {
              listen 80;
              server_name $DOMAIN;

              return 301 https://\$host\$request_uri;
            }

            server {
              listen 443 ssl;
              server_name $DOMAIN;

              ssl_certificate /etc/letsencrypt/live/ytclipper.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/ytclipper.com/privkey.pem;

              location / {
                proxy_pass http://localhost:$PORT;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            EOF

            sudo ln -sf $CONFIG_FILE /etc/nginx/sites-enabled/$DOMAIN
            sudo nginx -t
            sudo systemctl reload nginx

      - name: 🎉 Deployment Summary
        id: deployment_summary
        run: |
          echo "deployment_url=https://app-${{ steps.context.outputs.safe_branch }}.ytclipper.com" >> $GITHUB_OUTPUT
          echo "deployment_port=${{ steps.context.outputs.port }}" >> $GITHUB_OUTPUT
          echo "deployment_branch=${{ steps.context.outputs.safe_branch }}" >> $GITHUB_OUTPUT

      - run: |
          echo "🎉 Staging Deployment was created successfully!"
          echo "🔗 URL: https://app-${{ steps.context.outputs.safe_branch }}.ytclipper.com"
          echo "📦 Branch: ${{ steps.context.outputs.safe_branch }}"
          echo "🔢 Port: ${{ steps.context.outputs.port }}"

  comment-pr:
    name: Comment on PR with Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'pull_request_target'
    steps:
      - name: Create deployment URL comment
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "deployment-info"
          message: |
            **🚀 Deployment Status: Ready**

            🎉 Staging deployment created successfully!

            - **🔗 URL**: ${{ needs.deploy-staging.outputs.deployment_url }}
            - **📦 Branch**: ${{ needs.deploy-staging.outputs.deployment_branch }}
            - **🔢 Port**: ${{ needs.deploy-staging.outputs.deployment_port }}

            _Deployed by GitHub Actions • Updates automatically on new commits_
          recreate: true
          number: ${{ github.event.pull_request.number }}

      - name: Add troubleshooting info
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2.1.0
        with:
          header: "deployment-error"
          message: |
            **❌ Deployment Failed**

            Deployment to staging failed. Please check workflow logs:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          recreate: true
          number: ${{ github.event.pull_request.number }}
