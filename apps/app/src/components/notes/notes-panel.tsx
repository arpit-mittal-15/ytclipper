import { useGetTimestampsQuery } from '@/services/timestamps';
import { useAppSelector } from '@/store/hooks';
import MarkdownPreview from '@uiw/react-markdown-preview';
import {
  Badge,
  Button,
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Input,
  ScrollArea,
} from '@ytclipper/ui';
import { Clock, Download, Edit, Hash, Plus, X } from 'lucide-react';
import { useState } from 'react';

export interface Note {
  id: string;
  timestamp: number;
  title: string;
  note: string;
  tags: string[];
  createdAt: Date;
}

interface NotesPanelProps {
  videoId: string;
  onAddNote: (note: Omit<Note, 'id' | 'createdAt'>) => void;
}

export const NotesPanel = ({ videoId, onAddNote }: NotesPanelProps) => {
  const [isAddingNote, setIsAddingNote] = useState(false);
  const [editingNote, setEditingNote] = useState<string | null>(null);
  const [expandedNoteIds, setExpandedNoteIds] = useState<string[]>([]);
  const [newNote, setNewNote] = useState({
    timestamp: 0,
    title: '',
    note: '',
    tags: [] as string[],
  });
  const timeStampsSliceData = useAppSelector((state) => state.timestamps);
  const currentTime = timeStampsSliceData.currentTimestamp;
  const videoTitle = timeStampsSliceData.videoTitle;
  const [tagInput, setTagInput] = useState('');

  const {
    data: timestampsData,
    isLoading: timestampsLoading,
    refetch,
  } = useGetTimestampsQuery(videoId || '');

  const notes = timestampsData?.data.timestamps || [];

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const handleAddNote = () => {
    if (newNote.title.trim()) {
      onAddNote({
        ...newNote,
        timestamp: newNote.timestamp || currentTime,
      });
      setNewNote({ timestamp: 0, title: '', note: '', tags: [] });
      setIsAddingNote(false);
    }
  };

  const addTag = () => {
    if (tagInput.trim() && !newNote.tags.includes(tagInput.trim())) {
      setNewNote((prev) => ({
        ...prev,
        tags: [...prev.tags, tagInput.trim()],
      }));
      setTagInput('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setNewNote((prev) => ({
      ...prev,
      tags: prev.tags.filter((tag) => tag !== tagToRemove),
    }));
  };

  const getCurrentNote = () => {
    return notes.find(
      (note) => Math.abs(note.timestamp - currentTime) < 5, // Within 5 seconds
    );
  };

  // Markdown export functionality
  const exportToMarkdown = () => {
    const formatMarkdownTime = (seconds: number) => {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = Math.floor(seconds % 60);
      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    const generateMarkdown = () => {
      let markdown = '';

      markdown += `# 📝 YouTube Video Notes\n\n`;

      if (videoTitle) {
        markdown += `**Video:** ${videoTitle}\n`;
      }

      if (videoId) {
        markdown += `**URL:** https://www.youtube.com/watch?v=${videoId}\n`;
      }

      markdown += `**Date:** ${new Date().toLocaleDateString()}\n`;
      markdown += `**Total Notes:** ${notes.length}\n\n`;

      if (notes.length === 0) {
        markdown += `*No notes available*\n`;
        return markdown;
      }

      markdown += `---\n\n`;

      markdown += `## 📋 Table of Contents\n\n`;
      notes.forEach((note, index) => {
        markdown += `${index + 1}. [${note.title}](#note-${index + 1}---${note.title.toLowerCase().replace(/[^a-z0-9]/g, '-')}) - ${formatMarkdownTime(note.timestamp)}\n`;
      });
      markdown += `\n---\n\n`;

      markdown += `## 📄 Notes\n\n`;
      notes.forEach((note, index) => {
        markdown += `### Note ${index + 1} - ${note.title}\n\n`;
        markdown += `**⏰ Timestamp:** [${formatMarkdownTime(note.timestamp)}](https://www.youtube.com/watch?v=${videoId}&t=${note.timestamp}s)\n\n`;

        if (note.note) {
          markdown += `**Description:**\n${note.note}\n\n`;
        }

        if (note.tags.length > 0) {
          markdown += `**Tags:** ${note.tags.map((tag) => `\`${tag}\``).join(', ')}\n\n`;
        }

        markdown += `**Created:** ${note.created_at.toLocaleString()}\n\n`;
        markdown += `---\n\n`;
      });

      markdown += `\n*Generated by YTClipper on ${new Date().toLocaleString()}*\n`;

      return markdown;
    };

    const markdown = generateMarkdown();
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;

    const fileName = videoTitle
      ? `${videoTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_notes.md`
      : `youtube_notes_${new Date().toISOString().split('T')[0]}.md`;

    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const currentNote = getCurrentNote();

  return (
    <div className='flex flex-col h-full min-h-0 bg-notes-bg overflow-hidden'>
      <div className='p-4 border-b bg-card'>
        <div className='flex items-center justify-between'>
          <div>
            <h2 className='text-lg font-semibold'>Video Notes</h2>
            <p className='text-sm text-muted-foreground'>
              {notes.length} notes • Current:{' '}
              {formatTime(timeStampsSliceData.currentTimestamp)}
            </p>
          </div>
          <div className='flex gap-2'>
            {notes.length > 0 && (
              <Button variant='outline' size='sm' onClick={exportToMarkdown}>
                <Download className='h-4 w-4' />
                Export MD
              </Button>
            )}
            <Dialog open={isAddingNote} onOpenChange={setIsAddingNote}>
              <DialogTrigger asChild>
                <Button variant='default' size='sm'>
                  <Plus className='h-4 w-4' />
                  Add Note
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add New Note</DialogTitle>
                </DialogHeader>
                <div className='space-y-4'>
                  <div>
                    <label htmlFor='markdown' className='text-sm font-medium'>
                      Timestamp
                    </label>
                    <Input
                      id='markdown'
                      type='number'
                      placeholder={`${currentTime}`}
                      value={newNote.timestamp || currentTime}
                      onChange={(e) =>
                        setNewNote((prev) => ({
                          ...prev,
                          timestamp: Number(e.target.value),
                        }))
                      }
                    />
                  </div>
                  <div>
                    <label htmlFor='title' className='text-sm font-medium'>
                      Title
                    </label>
                    <Input
                      id='title'
                      placeholder='Note title...'
                      value={newNote.title}
                      onChange={(e) =>
                        setNewNote((prev) => ({
                          ...prev,
                          title: e.target.value,
                        }))
                      }
                    />
                  </div>
                  <div>
                    <label htmlFor='note' className='text-sm font-medium'>
                      Note
                    </label>
                    {/* <MDXEditor
                      markdown={newNote.note}
                      plugins={[
                        headingsPlugin(),
                        listsPlugin(),
                        quotePlugin(),
                        thematicBreakPlugin(),
                      ]}
                      onChange={(value) =>
                        setNewNote((prev) => ({
                          ...prev,
                          note: value,
                        }))
                      }
                      className='border rounded-md min-h-[120px] p-2 max-h-[300px] overflow-y-auto'
                      placeholder='Write markdown or LaTeX here...'
                    /> */}
                  </div>
                  <div>
                    <label htmlFor='tags' className='text-sm font-medium'>
                      Tags
                    </label>
                    <div className='flex gap-2'>
                      <Input
                        id='tags'
                        placeholder='Add tag...'
                        value={tagInput}
                        onChange={(e) => setTagInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && addTag()}
                      />
                      <Button type='button' variant='outline' onClick={addTag}>
                        <Hash className='h-4 w-4' />
                      </Button>
                    </div>
                    <div className='flex flex-wrap gap-1 mt-2'>
                      {newNote.tags.map((tag) => (
                        <Badge
                          key={tag}
                          variant='secondary'
                          className='text-xs'
                        >
                          {tag}
                          <Button
                            variant='ghost'
                            size='sm'
                            className='h-auto p-0 ml-1'
                            onClick={() => removeTag(tag)}
                          >
                            <X className='h-3 w-3' />
                          </Button>
                        </Badge>
                      ))}
                    </div>
                  </div>
                  <div className='flex gap-2'>
                    <Button onClick={handleAddNote} className='flex-1'>
                      Add Note
                    </Button>
                    <Button
                      variant='outline'
                      onClick={() => setIsAddingNote(false)}
                    >
                      Cancel
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </div>

      {currentNote ? (
        <Card className='m-4 bg-timestamp/10 border-timestamp'>
          <CardHeader className='pb-2'>
            <div className='flex items-center justify-between'>
              <CardTitle className='text-sm font-medium'>
                Current Note
              </CardTitle>
              <Badge variant='outline' className='text-timestamp'>
                <Clock className='h-3 w-3 mr-1' />
                {formatTime(currentNote.timestamp)}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <h3 className='font-medium mb-1'>{currentNote.title}</h3>
            <p className='text-sm text-muted-foreground mb-2'>
              {currentNote.note}
            </p>
            <div className='flex flex-wrap gap-1'>
              {currentNote.tags.map((tag) => (
                <Badge key={tag} variant='secondary' className='text-xs'>
                  {tag}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      ) : null}

      <div className='flex-1 flex flex-col'>
        <ScrollArea className='flex-1 p-2 max-h-[calc(100vh-32px-148px)]'>
          <div className='space-y-3 min-h-0'>
            {timestampsLoading ? (
              <div className='text-center py-8 text-muted-foreground'>
                <Clock className='h-12 w-12 mx-auto mb-4 opacity-30' />
                <p>Loading notes...</p>
              </div>
            ) : null}

            {notes.length === 0 && !timestampsLoading ? (
              <div className='text-center py-8 text-muted-foreground'>
                <Clock className='h-12 w-12 mx-auto mb-4 opacity-30' />
                <p>No notes yet</p>
                <p className='text-sm'>
                  Click Add Note to create your first note
                </p>
              </div>
            ) : null}

            {notes.length
              ? notes.map((note) => {
                  const isExpanded = expandedNoteIds.includes(note.id);
                  return (
                    <Card
                      key={note.id}
                      className={`cursor-pointer p-0 transition-all hover:shadow-md ${
                        note.id === currentNote?.id
                          ? 'ring-2 ring-timestamp'
                          : ''
                      }`}
                      onClick={() => {
                        setExpandedNoteIds((prev) =>
                          isExpanded
                            ? prev.filter((id) => id !== note.id)
                            : [...prev, note.id],
                        );
                      }}
                    >
                      <CardContent className='p-4'>
                        <div className='flex items-start justify-between mb-2'>
                          <h3 className='font-medium mb-1 text-sm'>
                            {note.title}
                          </h3>
                          <Button
                            variant='ghost'
                            size='sm'
                            className='h-auto p-1'
                            onClick={(e) => {
                              e.stopPropagation();
                              setEditingNote(note.id);
                            }}
                          >
                            <Edit className='h-3 w-3' />
                          </Button>
                        </div>
                        <div className='flex items-center gap-2 mb-2'>
                          <Badge variant='outline' className='text-xs'>
                            <Clock className='h-3 w-3 mr-1' />
                            {formatTime(note.timestamp)}
                          </Badge>
                          {note.tags.length > 0 && (
                            <div className='flex flex-wrap gap-1'>
                              {note.tags.map((tag) => (
                                <Badge
                                  key={tag}
                                  variant='secondary'
                                  className='text-xs'
                                >
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          )}
                        </div>
                        <div
                          className={`transition-all duration-300 overflow-hidden ${
                            isExpanded
                              ? 'max-h-[500px] opacity-100'
                              : 'max-h-0 opacity-0'
                          }`}
                        >
                          {note.note ? (
                            <div className='text-xs text-muted-foreground mb-2'>
                              <MarkdownPreview
                                className='bg-background'
                                source={note.note}
                                wrapperElement={{
                                  'data-color-mode': 'light',
                                }}
                              />
                            </div>
                          ) : null}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })
              : null}
          </div>
        </ScrollArea>
      </div>
    </div>
  );
};
